"""

# Em andamento

# Opera√ß√µes de uma calculadora convencional
Soma (+) [Feito]
Subtra√ß√£o (-) [Feito]
Multiplica√ß√£o (√ó) [Feito]
Divis√£o (√∑) [Feito]
Raiz quadrada (‚àö) [Feito]
Potencia√ß√£o (x‚Åø) [Feito]
Raiz en√©sima (‚Åø‚àöx) [Feito]
Exponencial (eÀ£) [Feito]
Equa√ß√£o do Segundo Grau [Feito]
Fatorial (n!) [Feito]
Seno (sin) [Feito]
Cosseno (cos) [Feito]
Tangente (tan) [Feito]
M√≥dulo (|x|) [Feito]
M√©dia
Graus ‚Üî Radianos (deg/rad)
Radianos ‚Üî Graus (rad/deg)
Logaritmo decimal (log)
Logaritmo natural (ln)
Porcentagem (%)
Nota√ß√£o cient√≠fica (EXP ou E)
Soma acumulada
Vari√¢ncia

Convers√£o de Bases:
Decimal ‚Üî Bin√°rio ‚Üî Octal ‚Üî Hexadecimal

# Futuro
C√°lculo de mem√≥ria:
Adicionar √† mem√≥ria (M+)
Subtrair da mem√≥ria (M-)
Recuperar valor da mem√≥ria (MR)
Limpar mem√≥ria (MC)
Igualdade (=)
Limpeza/Reset (C/AC ou CE)

"""

import math

class Calculadora:
    
    def soma(self, a, b):
        return a + b
    
    def subtracao(self, a, b):
        return a - b
    
    def multiplicacao(self, a, b):
        return a * b
    
    def divisao(self, a, b):
        if b == 0:
            return "Erro: Divis√£o por zero"
        else:
            return a / b
        
    def raiz_quadrada(self, a):
        if a < 0:
            return "Erro: Raiz quadrada de n√∫mero negativo"
        else:
            return math.sqrt(a)
        
    def raiz(self, a, n):
        if n <= 0:
            return "O √≠ndice da raiz deve ser maior que zero."
        elif a < 0 and n % 2 == 0:
            "Erro: N√£o √© poss√≠vel calcular a raiz par de um n√∫mero negativo."
        else:
            return math.pow(a, 1/n)
        
    def potenciacao(self, a, b):
        return math.pow(a, b)
        
    def fatorial(self, n):
        if n < 0:
            return "Erro: Fatorial de n√∫mero negativo"
        else:
            return math.factorial(n)
    
    def seno(self, a):
        return math.sin(a)
    
    def cosseno(self, a):
        return math.cos(a)
    
    def tangente(self, a):
        return math.tan(a)
    
    def modulo(a):
        return abs(a)
    
    def bhaskara(self, a, b, c):
        delta = pow(b, 2) - (4 * a * c)
        
        if delta < 0:
            return "N√£o h√° solu√ß√£o real para a equa√ß√£o"
        elif delta == 0:
            x1 = -b / (2 * a)
            return f"O valor real de ùë• √©: {x1}"
        else:
            x1 = (-b + math.sqrt(delta)) / (2 * a)
            x2 = (-b - math.sqrt(delta)) / (2 * a)
            return f"Os valores reais da equa√ß√£o s√£o: ùë•‚ÇÅ: {x1} e ùë•‚ÇÇ: {x2}"
    
    